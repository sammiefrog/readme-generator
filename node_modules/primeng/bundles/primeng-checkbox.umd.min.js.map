{"version":3,"sources":["ng://primeng/checkbox/checkbox.ts"],"names":["CHECKBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Checkbox","multi","cd","this","checkboxIcon","onChange","EventEmitter","onModelChange","onModelTouched","focused","checked","prototype","onClick","event","checkbox","focus","preventDefault","disabled","readonly","updateModel","binary","addValue","removeValue","model","formControl","setValue","emit","handleChange","target","isChecked","indexOf","value","_this","filter","val","__spread","onFocus","onBlur","inputViewChild","nativeElement","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","ChangeDetectorRef","__decorate","Input","ViewChild","Output","Component","selector","template","providers","changeDetection","ChangeDetectionStrategy","Default","CheckboxModule","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ViewChild,ElementRef,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl} from '@angular/forms';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Checkbox),\n  multi: true\n};\n\n@Component({\n    selector: 'p-checkbox',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'ui-chkbox ui-widget': true,'ui-chkbox-readonly': readonly}\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [readonly]=\"readonly\" [value]=\"value\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\n                [ngClass]=\"{'ui-state-focus':focused}\" (change)=\"handleChange($event)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.required]=\"required\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"onClick($event,cb,true)\"\n                        [ngClass]=\"{'ui-state-active':checked,'ui-state-disabled':disabled,'ui-state-focus':focused}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"checked ? checkboxIcon : null\"></span>\n            </div>\n        </div>\n        <label (click)=\"onClick($event,cb,true)\" [class]=\"labelStyleClass\"\n                [ngClass]=\"{'ui-chkbox-label': true, 'ui-label-active':checked, 'ui-label-disabled':disabled, 'ui-label-focus':focused}\"\n                *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [CHECKBOX_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Checkbox implements ControlValueAccessor {\n\n    @Input() value: any;\n\n    @Input() name: string;\n\n    @Input() disabled: boolean;\n    \n    @Input() binary: boolean;\n    \n    @Input() label: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n    \n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() labelStyleClass: string;\n    \n    @Input() formControl: FormControl;\n    \n    @Input() checkboxIcon: string = 'pi pi-check';\n    \n    @Input() readonly: boolean;\n\n    @Input() required: boolean;\n\n    @ViewChild('cb') inputViewChild: ElementRef;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    model: any;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n        \n    focused: boolean = false;\n    \n    checked: boolean = false;\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n    onClick(event,checkbox,focus:boolean) {\n        event.preventDefault();\n        \n        if (this.disabled || this.readonly) {\n            return;\n        }\n        \n        this.checked = !this.checked;\n        this.updateModel();\n        \n        if (focus) {\n            checkbox.focus();\n        }\n    }\n    \n    updateModel() {\n        if (!this.binary) {\n            if (this.checked)\n                this.addValue();\n            else\n                this.removeValue();\n\n            this.onModelChange(this.model);\n            \n            if (this.formControl) {\n                this.formControl.setValue(this.model);\n            }\n        }\n        else {\n            this.onModelChange(this.checked);\n        }\n        \n        this.onChange.emit(this.checked);\n    }\n    \n    handleChange(event)Â {\n        if (!this.readonly) {\n            this.checked = event.target.checked;\n            this.updateModel();\n        }\n    }\n\n    isChecked(): boolean {\n        if (this.binary)\n            return this.model;\n        else\n            return this.model && this.model.indexOf(this.value) > -1;\n    }\n\n    removeValue() {\n        this.model = this.model.filter(val => val !== this.value);\n    }\n\n    addValue() {\n        if (this.model)\n            this.model = [...this.model, this.value];\n        else\n            this.model = [this.value];\n    }\n    \n    onFocus() {\n        this.focused = true;\n    }\n\n    onBlur() {\n        this.focused = false;\n        this.onModelTouched();\n    }\n\n    focus() {\n        this.inputViewChild.nativeElement.focus();\n    }\n     \n    writeValue(model: any) : void {\n        this.model = model;\n        this.checked = this.isChecked();\n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Checkbox],\n    declarations: [Checkbox]\n})\nexport class CheckboxModule { }\n"]}