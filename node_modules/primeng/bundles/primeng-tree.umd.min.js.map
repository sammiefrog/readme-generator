{"version":3,"sources":["ng://primeng/tree/tree.ts"],"names":["UITreeNode","tree","this","prototype","ngOnInit","node","parent","parentNode","syncNodeOption","value","getNodeWithKey","key","getIcon","icon","expanded","children","length","expandedIcon","collapsedIcon","UITreeNode_1","ICON_CLASS","isLeaf","isNodeLeaf","toggle","event","collapse","expand","onNodeExpand","emit","originalEvent","onNodeCollapse","onNodeClick","onNodeKeydown","which","onNodeTouchEnd","onNodeRightClick","isSelected","onDropPoint","position","_this","preventDefault","dragNode","dragNodeIndex","dragNodeScope","isValidDropPointIndex","dragNodeTree","index","allowDrop","validateDrop","onNodeDrop","dropNode","dropIndex","accept","processPointDrop","draghoverPrev","draghoverNext","newNodeList","dragNodeSubNodes","splice","push","dragDropService","stopDrag","subNodes","onDropPointDragOver","dataTransfer","dropEffect","onDropPointDragEnter","onDropPointDragLeave","onDragStart","draggableNodes","draggable","setData","startDrag","scope","draggableScope","onDragStop","onDropNodeDragOver","droppableNodes","stopPropagation","onDropNode","droppable","dragNode_1","processNodeDrop","draghoverNode","onDropNodeDragEnter","onDropNodeDragLeave","rect","currentTarget","getBoundingClientRect","x","left","width","y","Math","floor","top","height","onKeyDown","nodeElement","target","parentElement","nodeName","listElement","focusNode","nextNodeElement","nextElementSibling","nextSiblingAncestor","findNextSiblingOfAncestor","previousElementSibling","findLastVisibleDescendant","parentNodeElement","getParentNodeElement","childrenListElement","lastChildElement","tagName","element","focus","Inject","args","forwardRef","Tree","__decorate","Input","Component","selector","template","__param","el","selectionChange","EventEmitter","onNodeSelect","onNodeUnselect","onNodeContextMenuSelect","layout","metaKeySelection","propagateSelectionUp","propagateSelectionDown","loadingIcon","emptyMessage","filterBy","filterMode","nodeTrackBy","item","dragStartSubscription","dragStart$","subscribe","dragStopSubscription","dragStop$","dragHover","Object","defineProperty","ngAfterContentInit","templates","templateMap","forEach","name","eventTarget","DomHandler","hasClass","selectionMode","selectable","hasFilteredNodes","index_1","findIndexInSelection","selected","isCheckboxSelectionMode","propagateDown","selection","filter","val","i","propagateUp","__spread","nodeTouched","metaKey","ctrlKey","isSingleSelectionMode","isMultipleSelectionMode","contextMenu","className","indexOf","show","selectedNode","parentNodes","option","_node","filteredNodes","nodes","nodes_1","__values","nodes_1_1","next","done","matchedNode","select","selectedCount","childPartialSelected","_b","_c","child","partialSelected","index_2","leaf","getRootNode","getTemplateForNode","type","onDragOver","onDrop","onDragEnter","onDragLeave","isValidDragScope","allow","parent_1","dragScope","dropScope","droppableScope","Array","dropScope_1","dropScope_1_1","s","dragScope_1","e_5","dragScope_1_1","onFilter","filterValue","searchFields","split","filterText","ObjectUtils","removeAccents","toLowerCase","isStrictMode","copyNode","__assign","paramsWithoutNode","findFilteredNodes","isFilterMatched","matched","childNodes","childNodes_1","childNodes_1_1","childNode","copyChildNode","_a","searchFields_1","searchFields_1_1","field","String","resolveFieldData","getBlockableElement","nativeElement","ngOnDestroy","unsubscribe","ElementRef","TreeDragDropService","decorators","Optional","Output","ContentChildren","PrimeTemplate","changeDetection","ChangeDetectionStrategy","Default","TreeModule","NgModule","imports","CommonModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,AfterContentInit,OnDestroy,Output,EventEmitter,OnInit,\n    ContentChildren,QueryList,TemplateRef,Inject,ElementRef,forwardRef,ChangeDetectionStrategy} from '@angular/core';\nimport {Optional} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TreeNode} from 'primeng/api';\nimport {SharedModule} from 'primeng/api';\nimport {PrimeTemplate} from 'primeng/api';\nimport {TreeDragDropService} from 'primeng/api';\nimport {Subscription} from 'rxjs';\nimport {BlockableUI} from 'primeng/api';\nimport {ObjectUtils} from 'primeng/utils';\nimport {DomHandler} from 'primeng/dom';\n\n@Component({\n    selector: 'p-treeNode',\n    template: `\n        <ng-template [ngIf]=\"node\">\n            <li *ngIf=\"tree.droppableNodes\" class=\"ui-treenode-droppoint\" [ngClass]=\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverPrev}\"\n            (drop)=\"onDropPoint($event,-1)\" (dragover)=\"onDropPointDragOver($event)\" (dragenter)=\"onDropPointDragEnter($event,-1)\" (dragleave)=\"onDropPointDragLeave($event)\"></li>\n            <li *ngIf=\"!tree.horizontal\" role=\"treeitem\" [ngClass]=\"['ui-treenode',node.styleClass||'', isLeaf() ? 'ui-treenode-leaf': '']\">\n                <div class=\"ui-treenode-content\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\" (touchend)=\"onNodeTouchEnd()\"\n                    (drop)=\"onDropNode($event)\" (dragover)=\"onDropNodeDragOver($event)\" (dragenter)=\"onDropNodeDragEnter($event)\" (dragleave)=\"onDropNodeDragLeave($event)\"\n                    [draggable]=\"tree.draggableNodes\" (dragstart)=\"onDragStart($event)\" (dragend)=\"onDragStop($event)\" [attr.tabindex]=\"0\"\n                    [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode && node.selectable !== false,'ui-treenode-dragover':draghoverNode, 'ui-treenode-content-selected':isSelected()}\" \n                    (keydown)=\"onKeyDown($event)\" [attr.aria-posinset]=\"this.index + 1\" [attr.aria-expanded]=\"this.node.expanded\" [attr.aria-selected]=\"isSelected()\" [attr.aria-label]=\"node.label\">\n                    <span class=\"ui-tree-toggler pi pi-fw ui-unselectable-text\" [ngClass]=\"{'pi-caret-right':!node.expanded,'pi-caret-down':node.expanded}\"\n                            (click)=\"toggle($event)\"></span\n                    ><div class=\"ui-chkbox\" *ngIf=\"tree.selectionMode == 'checkbox'\" [attr.aria-checked]=\"isSelected()\"><div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-disabled': node.selectable === false}\">\n                        <span class=\"ui-chkbox-icon ui-clickable pi\"\n                            [ngClass]=\"{'pi-check':isSelected(),'pi-minus':node.partialSelected}\"></span></div></div\n                    ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                    ><span class=\"ui-treenode-label ui-corner-all\"\n                        [ngClass]=\"{'ui-state-highlight':isSelected()}\">\n                            <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                            <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                            </span>\n                    </span>\n                </div>\n                <ul class=\"ui-treenode-children\" style=\"display: none;\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'block' : 'none'\" role=\"group\">\n                    <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last; let index=index; trackBy: tree.nodeTrackBy\" [node]=\"childNode\" [parentNode]=\"node\"\n                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\"></p-treeNode>\n                </ul>\n            </li>\n            <li *ngIf=\"tree.droppableNodes&&lastChild\" class=\"ui-treenode-droppoint\" [ngClass]=\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverNext}\"\n            (drop)=\"onDropPoint($event,1)\" (dragover)=\"onDropPointDragOver($event)\" (dragenter)=\"onDropPointDragEnter($event,1)\" (dragleave)=\"onDropPointDragLeave($event)\"></li>\n            <table *ngIf=\"tree.horizontal\" [class]=\"node.styleClass\">\n                <tbody>\n                    <tr>\n                        <td class=\"ui-treenode-connector\" *ngIf=\"!root\">\n                            <table class=\"ui-treenode-connector-table\">\n                                <tbody>\n                                    <tr>\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!firstChild}\"></td>\n                                    </tr>\n                                    <tr>\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!lastChild}\"></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </td>\n                        <td class=\"ui-treenode\" [ngClass]=\"{'ui-treenode-collapsed':!node.expanded}\">\n                            <div class=\"ui-treenode-content ui-state-default ui-corner-all\" tabindex=\"0\"\n                                [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode,'ui-state-highlight':isSelected()}\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\"\n                                (touchend)=\"onNodeTouchEnd()\" (keydown)=\"onNodeKeydown($event)\">\n                                <span class=\"ui-tree-toggler pi pi-fw ui-unselectable-text\" [ngClass]=\"{'pi-plus':!node.expanded,'pi-minus':node.expanded}\" *ngIf=\"!isLeaf()\"\n                                        (click)=\"toggle($event)\"></span\n                                ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                                ><span class=\"ui-treenode-label ui-corner-all\">\n                                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                        <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                                        </span>\n                                </span>\n                            </div>\n                        </td>\n                        <td class=\"ui-treenode-children-container\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'table-cell' : 'none'\">\n                            <div class=\"ui-treenode-children\">\n                                <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last; trackBy: tree.nodeTrackBy\" [node]=\"childNode\"\n                                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\"></p-treeNode>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </ng-template>\n    `\n})\nexport class UITreeNode implements OnInit {\n\n    static ICON_CLASS: string = 'ui-treenode-icon ';\n\n    @Input() node: TreeNode;\n\n    @Input() parentNode: TreeNode;\n\n    @Input() root: boolean;\n\n    @Input() index: number;\n\n    @Input() firstChild: boolean;\n\n    @Input() lastChild: boolean;\n\n    tree: Tree;\n\n    constructor(@Inject(forwardRef(() => Tree)) tree) {\n        this.tree = tree as Tree;\n    }\n\n    draghoverPrev: boolean;\n\n    draghoverNext: boolean;\n\n    draghoverNode: boolean\n\n    ngOnInit() {\n        this.node.parent = this.parentNode;\n\n        if (this.parentNode) {\n            this.tree.syncNodeOption(this.node, this.tree.value, 'parent', this.tree.getNodeWithKey(this.parentNode.key, this.tree.value));\n        }\n    }\n\n    getIcon() {\n        let icon: string;\n\n        if (this.node.icon)\n            icon = this.node.icon;\n        else\n            icon = this.node.expanded && this.node.children && this.node.children.length ? this.node.expandedIcon : this.node.collapsedIcon;\n\n        return UITreeNode.ICON_CLASS + ' ' + icon;\n    }\n\n    isLeaf() {\n        return this.tree.isNodeLeaf(this.node);\n    }\n\n    toggle(event: Event) {\n        if (this.node.expanded)\n            this.collapse(event);\n        else\n            this.expand(event);\n    }\n\n    expand(event: Event) {\n        this.node.expanded = true;\n        this.tree.onNodeExpand.emit({originalEvent: event, node: this.node});\n    }\n\n    collapse(event: Event) {\n        this.node.expanded = false;\n        this.tree.onNodeCollapse.emit({originalEvent: event, node: this.node});\n    }\n\n    onNodeClick(event: MouseEvent) {\n        this.tree.onNodeClick(event, this.node);\n    }\n\n    onNodeKeydown(event: KeyboardEvent) {\n        if (event.which === 13) {\n            this.tree.onNodeClick(event, this.node);\n        }\n    } \n\n    onNodeTouchEnd() {\n        this.tree.onNodeTouchEnd();\n    }\n\n    onNodeRightClick(event: MouseEvent) {\n        this.tree.onNodeRightClick(event, this.node);\n    }\n\n    isSelected() {\n        return this.tree.isSelected(this.node);\n    }\n\n    onDropPoint(event: Event, position: number) {\n        event.preventDefault();\n        let dragNode = this.tree.dragNode;\n        let dragNodeIndex = this.tree.dragNodeIndex;\n        let dragNodeScope = this.tree.dragNodeScope;\n        let isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? (position === 1 || dragNodeIndex !== this.index - 1) : true;\n\n        if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {\n            if (this.tree.validateDrop) {\n                this.tree.onNodeDrop.emit({\n                    originalEvent: event,\n                    dragNode: dragNode,\n                    dropNode: this.node,\n                    dropIndex: this.index,\n                    accept: () => {\n                        this.processPointDrop(dragNode, dragNodeIndex, position);\n                    }\n                });\n            }\n            else {\n                this.processPointDrop(dragNode, dragNodeIndex, position);\n                this.tree.onNodeDrop.emit({\n                    originalEvent: event,\n                    dragNode: dragNode,\n                    dropNode: this.node,\n                    dropIndex: this.index\n                });\n            }\n        }\n\n        this.draghoverPrev = false;\n        this.draghoverNext = false;\n    }\n\n    processPointDrop(dragNode, dragNodeIndex, position) {\n        let newNodeList = this.node.parent ? this.node.parent.children : this.tree.value;\n        this.tree.dragNodeSubNodes.splice(dragNodeIndex, 1);\n        let dropIndex = this.index;\n\n        if (position < 0) {\n            dropIndex = (this.tree.dragNodeSubNodes === newNodeList) ? ((this.tree.dragNodeIndex > this.index) ? this.index : this.index - 1) : this.index;\n            newNodeList.splice(dropIndex, 0, dragNode);\n        }\n        else {\n            dropIndex = newNodeList.length;\n            newNodeList.push(dragNode);\n        }\n\n        this.tree.dragDropService.stopDrag({\n            node: dragNode,\n            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n            index: dragNodeIndex\n        });\n    }\n\n    onDropPointDragOver(event) {\n        event.dataTransfer.dropEffect = 'move';\n        event.preventDefault();\n    }\n\n    onDropPointDragEnter(event: Event, position: number) {\n        if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n            if (position < 0)\n                this.draghoverPrev = true;\n            else\n                this.draghoverNext = true;\n        }\n    }\n\n    onDropPointDragLeave(event: Event) {\n        this.draghoverPrev = false;\n        this.draghoverNext = false;\n    }\n\n    onDragStart(event) {\n        if (this.tree.draggableNodes && this.node.draggable !== false) {\n            event.dataTransfer.setData(\"text\", \"data\");\n\n            this.tree.dragDropService.startDrag({\n                tree: this,\n                node: this.node,\n                subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n                index: this.index,\n                scope: this.tree.draggableScope\n            });\n        }\n        else {\n            event.preventDefault();\n        }\n    }\n\n    onDragStop(event) {\n        this.tree.dragDropService.stopDrag({\n            node: this.node,\n            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n            index: this.index\n        });\n    }\n\n    onDropNodeDragOver(event) {\n        event.dataTransfer.dropEffect = 'move';\n        if (this.tree.droppableNodes) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    onDropNode(event) {\n        if (this.tree.droppableNodes && this.node.droppable !== false) {\n            event.preventDefault();\n            event.stopPropagation();\n            let dragNode = this.tree.dragNode;\n            if (this.tree.allowDrop(dragNode, this.node, this.tree.dragNodeScope)) {\n                if (this.tree.validateDrop) {\n                    this.tree.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: this.node,\n                        index: this.index,\n                        accept: () => {\n                            this.processNodeDrop(dragNode);\n                        }\n                    });\n                }   \n                else {\n                    this.processNodeDrop(dragNode);\n                    this.tree.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: this.node,\n                        index: this.index\n                    });\n                } \n            }\n        }\n\n        this.draghoverNode = false;\n    }\n\n    processNodeDrop(dragNode) {\n        let dragNodeIndex = this.tree.dragNodeIndex;\n        this.tree.dragNodeSubNodes.splice(dragNodeIndex, 1);\n\n        if (this.node.children)\n            this.node.children.push(dragNode);\n        else\n            this.node.children = [dragNode];\n\n        this.tree.dragDropService.stopDrag({\n            node: dragNode,\n            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n            index: this.tree.dragNodeIndex\n        });\n\n        \n    }\n\n    onDropNodeDragEnter(event) {\n        if (this.tree.droppableNodes && this.node.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n            this.draghoverNode = true;\n        }\n    }\n\n    onDropNodeDragLeave(event) {\n        if (this.tree.droppableNodes) {\n            let rect = event.currentTarget.getBoundingClientRect();\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {\n               this.draghoverNode = false;\n            }\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        const nodeElement = (<HTMLDivElement> event.target).parentElement.parentElement;\n\n        if (nodeElement.nodeName !== 'P-TREENODE') {\n            return;\n        }\n\n        switch (event.which) {\n            //down arrow\n            case 40:\n                const listElement = (this.tree.droppableNodes) ? nodeElement.children[1].children[1] : nodeElement.children[0].children[1];\n                if (listElement && listElement.children.length > 0) {\n                    this.focusNode(listElement.children[0]);\n                }\n                else {\n                    const nextNodeElement = nodeElement.nextElementSibling;\n                    if (nextNodeElement) {\n                        this.focusNode(nextNodeElement);\n                    }\n                    else {\n                        let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\n                        if (nextSiblingAncestor) {\n                            this.focusNode(nextSiblingAncestor);\n                        }\n                    }\n                }\n\n                event.preventDefault();\n            break;\n\n            //up arrow\n            case 38:\n                if (nodeElement.previousElementSibling) {\n                    this.focusNode(this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n                }\n                else {\n                    let parentNodeElement = this.getParentNodeElement(nodeElement);\n                    if (parentNodeElement) {\n                        this.focusNode(parentNodeElement);\n                    }\n                }\n\n                event.preventDefault();\n            break;\n\n            //right arrow\n            case 39:\n                if (!this.node.expanded) {\n                    this.expand(event);\n                }\n\n                event.preventDefault();\n            break;\n\n            //left arrow\n            case 37:\n                if (this.node.expanded) {\n                    this.collapse(event);\n                }\n                else {\n                    let parentNodeElement = this.getParentNodeElement(nodeElement);\n                    if (parentNodeElement) {\n                        this.focusNode(parentNodeElement);\n                    }\n                }\n\n                event.preventDefault();\n            break;\n            \n            //enter\n            case 13:\n                this.tree.onNodeClick(event, this.node);\n                event.preventDefault();\n            break;\n\n            default:\n                //no op\n            break;\n        }\n    }\n\n    findNextSiblingOfAncestor(nodeElement) {\n        let parentNodeElement = this.getParentNodeElement(nodeElement);\n        if (parentNodeElement) {\n            if (parentNodeElement.nextElementSibling)\n                return parentNodeElement.nextElementSibling;\n            else\n                return this.findNextSiblingOfAncestor(parentNodeElement);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findLastVisibleDescendant(nodeElement) {\n        const childrenListElement = nodeElement.children[0].children[1];\n        if (childrenListElement && childrenListElement.children.length > 0) {\n            const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n\n            return this.findLastVisibleDescendant(lastChildElement);\n        }\n        else {\n            return nodeElement;\n        }\n    }\n\n    getParentNodeElement(nodeElement) {\n        const parentNodeElement = nodeElement.parentElement.parentElement.parentElement;\n\n        return parentNodeElement.tagName === 'P-TREENODE' ? parentNodeElement : null;\n    }\n\n    focusNode(element) {\n        if (this.tree.droppableNodes)\n            element.children[1].children[0].focus();\n        else\n            element.children[0].children[0].focus();\n    }\n}\n\n@Component({\n    selector: 'p-tree',\n    template: `\n        <div [ngClass]=\"{'ui-tree ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode,'ui-treenode-dragover':dragHover,'ui-tree-loading': loading}\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"!horizontal\"\n            (drop)=\"onDrop($event)\" (dragover)=\"onDragOver($event)\" (dragenter)=\"onDragEnter($event)\" (dragleave)=\"onDragLeave($event)\">\n            <div class=\"ui-tree-loading-mask ui-widget-overlay\" *ngIf=\"loading\"></div>\n            <div class=\"ui-tree-loading-content\" *ngIf=\"loading\">\n                <i [class]=\"'ui-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"filter\" class=\"ui-tree-filter-container\">\n                <input #filter type=\"text\" autocomplete=\"off\" class=\"ui-tree-filter ui-inputtext ui-widget ui-state-default ui-corner-all\" [attr.placeholder]=\"filterPlaceholder\"\n                    (keydown.enter)=\"$event.preventDefault()\" (input)=\"onFilter($event)\">\n                    <span class=\"ui-tree-filter-icon pi pi-search\"></span>\n            </div>\n            <ul class=\"ui-tree-container\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                <p-treeNode *ngFor=\"let node of getRootNode(); let firstChild=first;let lastChild=last; let index=index; trackBy: nodeTrackBy\" [node]=\"node\"\n                [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\"></p-treeNode>\n            </ul>\n            <div class=\"ui-tree-empty-message\" *ngIf=\"!loading && (value == null || value.length === 0)\">{{emptyMessage}}</div>\n        </div>\n        <div [ngClass]=\"{'ui-tree ui-tree-horizontal ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode}\"  [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"horizontal\">\n            <div class=\"ui-tree-loading ui-widget-overlay\" *ngIf=\"loading\"></div>\n            <div class=\"ui-tree-loading-content\" *ngIf=\"loading\">\n                <i [class]=\"'ui-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <table *ngIf=\"value&&value[0]\">\n                <p-treeNode [node]=\"value[0]\" [root]=\"true\"></p-treeNode>\n            </table>\n            <div class=\"ui-tree-empty-message\" *ngIf=\"!loading && (value == null || value.length === 0)\">{{emptyMessage}}</div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Tree implements OnInit,AfterContentInit,OnDestroy,BlockableUI {\n\n    @Input() value: TreeNode[];\n\n    @Input() selectionMode: string;\n\n    @Input() selection: any;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeDrop: EventEmitter<any> = new EventEmitter();\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() contextMenu: any;\n\n    @Input() layout: string = 'vertical';\n\n    @Input() draggableScope: any;\n\n    @Input() droppableScope: any;\n\n    @Input() draggableNodes: boolean;\n\n    @Input() droppableNodes: boolean;\n\n    @Input() metaKeySelection: boolean = true;\n\n    @Input() propagateSelectionUp: boolean = true;\n\n    @Input() propagateSelectionDown: boolean = true;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() emptyMessage: string = 'No records found';\n\n    @Input() ariaLabel: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() validateDrop: boolean;\n\n    @Input() filter: boolean;\n\n    @Input() filterBy: string = 'label';\n\n    @Input() filterMode: string = 'lenient';\n\n    @Input() filterPlaceholder: string;\n\n    @Input() nodeTrackBy: Function = (index: number, item: any) => item;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    public templateMap: any;\n\n    public nodeTouched: boolean;\n\n    public dragNodeTree: Tree;\n\n    public dragNode: TreeNode;\n\n    public dragNodeSubNodes: TreeNode[];\n\n    public dragNodeIndex: number;\n\n    public dragNodeScope: any;\n\n    public dragHover: boolean;\n\n    public dragStartSubscription: Subscription;\n\n    public dragStopSubscription: Subscription;\n\n    public filteredNodes: TreeNode[];\n\n    constructor(public el: ElementRef, @Optional() public dragDropService: TreeDragDropService) {}\n\n    ngOnInit() {\n        if (this.droppableNodes) {\n            this.dragStartSubscription = this.dragDropService.dragStart$.subscribe(\n              event => {\n                this.dragNodeTree = event.tree;\n                this.dragNode = event.node;\n                this.dragNodeSubNodes = event.subNodes;\n                this.dragNodeIndex = event.index;\n                this.dragNodeScope = event.scope;\n            });\n\n            this.dragStopSubscription = this.dragDropService.dragStop$.subscribe(\n              event => {\n                this.dragNodeTree = null;\n                this.dragNode = null;\n                this.dragNodeSubNodes = null;\n                this.dragNodeIndex = null;\n                this.dragNodeScope = null;\n                this.dragHover = false;\n            });\n        }\n    }\n\n    get horizontal(): boolean {\n        return this.layout == 'horizontal';\n    }\n\n    ngAfterContentInit() {\n        if (this.templates.length) {\n            this.templateMap = {};\n        }\n\n        this.templates.forEach((item) => {\n            this.templateMap[item.name] = item.template;\n        });\n    }\n\n    onNodeClick(event, node: TreeNode) {\n        let eventTarget = (<Element> event.target);\n\n        if (DomHandler.hasClass(eventTarget, 'ui-tree-toggler')) {\n            return;\n        }\n        else if (this.selectionMode) {\n            if (node.selectable === false) {\n                return;\n            }\n\n            if (this.hasFilteredNodes()) {\n                node = this.getNodeWithKey(node.key, this.value);\n\n                if (!node) {\n                    return;\n                }\n            }\n\n            let index = this.findIndexInSelection(node);\n            let selected = (index >= 0);\n\n            if (this.isCheckboxSelectionMode()) {\n                if (selected) {\n                    if (this.propagateSelectionDown)\n                        this.propagateDown(node, false);\n                    else\n                        this.selection = this.selection.filter((val,i) => i!=index);\n\n                    if (this.propagateSelectionUp && node.parent) {\n                        this.propagateUp(node.parent, false);\n                    }\n\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    if (this.propagateSelectionDown)\n                        this.propagateDown(node, true);\n                    else\n                        this.selection = [...this.selection||[],node];\n\n                    if (this.propagateSelectionUp && node.parent) {\n                        this.propagateUp(node.parent, true);\n                    }\n\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            else {\n                let metaSelection = this.nodeTouched ? false : this.metaKeySelection;\n\n                if (metaSelection) {\n                    let metaKey = (event.metaKey||event.ctrlKey);\n\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            this.selection = this.selection.filter((val,i) => i!=index);\n                            this.selectionChange.emit(this.selection);\n                        }\n\n                        this.onNodeUnselect.emit({originalEvent: event, node: node});\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(node);\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            this.selection = (!metaKey) ? [] : this.selection||[];\n                            this.selection = [...this.selection,node];\n                            this.selectionChange.emit(this.selection);\n                        }\n\n                        this.onNodeSelect.emit({originalEvent: event, node: node});\n                    }\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        if (selected) {\n                            this.selection = null;\n                            this.onNodeUnselect.emit({originalEvent: event, node: node});\n                        }\n                        else {\n                            this.selection = node;\n                            this.onNodeSelect.emit({originalEvent: event, node: node});\n                        }\n                    }\n                    else {\n                        if (selected) {\n                            this.selection = this.selection.filter((val,i) => i!=index);\n                            this.onNodeUnselect.emit({originalEvent: event, node: node});\n                        }\n                        else {\n                            this.selection = [...this.selection||[],node];\n                            this.onNodeSelect.emit({originalEvent: event, node: node});\n                        }\n                    }\n\n                    this.selectionChange.emit(this.selection);\n                }\n            }\n        }\n\n        this.nodeTouched = false;\n    }\n\n    onNodeTouchEnd() {\n        this.nodeTouched = true;\n    }\n\n    onNodeRightClick(event: MouseEvent, node: TreeNode) {\n        if (this.contextMenu) {\n            let eventTarget = (<Element> event.target);\n\n            if (eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {\n                return;\n            }\n            else {\n                let index = this.findIndexInSelection(node);\n                let selected = (index >= 0);\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode())\n                        this.selectionChange.emit(node);\n                    else\n                        this.selectionChange.emit([node]);\n                }\n\n                this.contextMenu.show(event);\n                this.onNodeContextMenuSelect.emit({originalEvent: event, node: node});\n            }\n        }\n    }\n\n    findIndexInSelection(node: TreeNode) {\n        let index: number = -1;\n\n        if (this.selectionMode && this.selection) {\n            if (this.isSingleSelectionMode()) {\n                let areNodesEqual = (this.selection.key && this.selection.key === node.key) || this.selection == node;\n                index = areNodesEqual ? 0 : - 1;\n            }\n            else {\n                for(let i = 0; i  < this.selection.length; i++) {\n                    let selectedNode = this.selection[i];\n                    let areNodesEqual = (selectedNode.key && selectedNode.key === node.key) || selectedNode == node;\n                    if (areNodesEqual) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    }\n\n    syncNodeOption(node, parentNodes, option, value?: any) {\n        // to synchronize the node option between the filtered nodes and the original nodes(this.value) \n        const _node = this.hasFilteredNodes() ? this.getNodeWithKey(node.key, parentNodes) : null;\n        if (_node) {\n            _node[option] = value||node[option];\n        }\n    }\n\n    hasFilteredNodes() {\n        return this.filter && this.filteredNodes && this.filteredNodes.length;\n    }\n\n    getNodeWithKey(key: string, nodes: TreeNode[]) {\n        for (let node of nodes) {\n            if (node.key === key) {\n                return node;\n            }\n\n            if (node.children) {\n                let matchedNode = this.getNodeWithKey(key, node.children);\n                if (matchedNode) {\n                    return matchedNode;\n                }\n            }\n        }\n    }\n\n    propagateUp(node: TreeNode, select: boolean) {\n        if (node.children && node.children.length) {\n            let selectedCount: number = 0;\n            let childPartialSelected: boolean = false;\n            for(let child of node.children) {\n                if (this.isSelected(child)) {\n                    selectedCount++;\n                }\n                else if (child.partialSelected) {\n                    childPartialSelected = true;\n                }\n            }\n\n            if (select && selectedCount == node.children.length) {\n                this.selection = [...this.selection||[],node];\n                node.partialSelected = false;\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this.selection = this.selection.filter((val,i) => i!=index);\n                    }\n                }\n\n                if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n\n            this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n        }\n\n        let parent = node.parent;\n        if (parent) {\n            this.propagateUp(parent, select);\n        }\n    }\n\n    propagateDown(node: TreeNode, select: boolean) {\n        let index = this.findIndexInSelection(node);\n\n        if (select && index == -1) {\n            this.selection = [...this.selection||[],node];\n        }\n        else if (!select && index > -1) {\n            this.selection = this.selection.filter((val,i) => i!=index);\n        }\n\n        node.partialSelected = false;\n\n        this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n\n        if (node.children && node.children.length) {\n            for(let child of node.children) {\n                this.propagateDown(child, select);\n            }\n        }\n    }\n\n    isSelected(node: TreeNode) {\n        return this.findIndexInSelection(node) != -1;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'multiple';\n    }\n\n    isCheckboxSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'checkbox';\n    }\n\n    isNodeLeaf(node) {\n        return node.leaf == false ? false : !(node.children && node.children.length);\n    }\n\n    getRootNode() {\n        return this.filteredNodes ? this.filteredNodes : this.value;\n    }\n    \n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\n        if (this.templateMap)\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\n        else\n            return null;\n    }    \n\n    onDragOver(event) {\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n            event.dataTransfer.dropEffect = 'move';\n            event.preventDefault();\n        }\n    }\n\n    onDrop(event) {\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n            event.preventDefault();\n            let dragNode = this.dragNode;\n            if (this.allowDrop(dragNode, null, this.dragNodeScope)) {\n                let dragNodeIndex = this.dragNodeIndex;\n                this.dragNodeSubNodes.splice(dragNodeIndex, 1);\n                this.value = this.value||[];\n                this.value.push(dragNode);\n\n                this.dragDropService.stopDrag({\n                    node: dragNode\n                });\n            }\n        }\n    }\n\n    onDragEnter(event) {\n        if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {\n            this.dragHover = true;\n        }\n    }\n\n    onDragLeave(event) {\n        if (this.droppableNodes) {\n            let rect = event.currentTarget.getBoundingClientRect();\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {\n               this.dragHover = false;\n            }\n        }\n    }\n\n    allowDrop(dragNode: TreeNode, dropNode: TreeNode, dragNodeScope: any): boolean {\n        if (!dragNode) {\n            //prevent random html elements to be dragged\n            return false;\n        }\n        else if (this.isValidDragScope(dragNodeScope)) {\n            let allow: boolean = true;\n            if (dropNode) {\n                if (dragNode === dropNode) {\n                    allow = false;\n                }\n                else {\n                    let parent = dropNode.parent;\n                    while(parent != null) {\n                        if (parent === dragNode) {\n                            allow = false;\n                            break;\n                        }\n                        parent = parent.parent;\n                    }\n                }\n            }\n\n            return allow;\n        }\n        else {\n            return false;\n        }\n    }\n\n    isValidDragScope(dragScope: any): boolean {\n        let dropScope = this.droppableScope;\n\n        if (dropScope) {\n            if (typeof dropScope === 'string') {\n                if (typeof dragScope === 'string')\n                    return dropScope === dragScope;\n                else if (dragScope instanceof Array)\n                    return (<Array<any>>dragScope).indexOf(dropScope) != -1;\n            }\n            else if (dropScope instanceof Array) {\n                if (typeof dragScope === 'string') {\n                    return (<Array<any>>dropScope).indexOf(dragScope) != -1;\n                }\n                else if (dragScope instanceof Array) {\n                    for(let s of dropScope) {\n                        for(let ds of dragScope) {\n                            if (s === ds) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    onFilter(event) {\n        let filterValue = event.target.value;\n        if (filterValue === '') {\n            this.filteredNodes = null;\n        }\n        else {\n            this.filteredNodes = [];\n            const searchFields: string[] = this.filterBy.split(',');\n            const filterText = ObjectUtils.removeAccents(filterValue).toLowerCase();\n            const isStrictMode = this.filterMode === 'strict';\n            for(let node of this.value) {\n                let copyNode = {...node};\n                let paramsWithoutNode = {searchFields, filterText, isStrictMode};\n                if ((isStrictMode && (this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                    (!isStrictMode && (this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                    this.filteredNodes.push(copyNode);\n                }\n            }\n        }  \n    }\n\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = {...childNode};\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n            \n            if (matched) {\n                node.expanded = true;\n                return true;\n            }\n        }\n    }\n\n    isFilterMatched(node, {searchFields, filterText, isStrictMode}) {\n        let matched = false;\n        for(let field of searchFields) {\n            let fieldValue = ObjectUtils.removeAccents(String(ObjectUtils.resolveFieldData(node, field))).toLowerCase();\n            if (fieldValue.indexOf(filterText) > -1) {\n                matched = true;\n            }\n        }\n\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, {searchFields, filterText, isStrictMode}) || matched;\n        }\n\n        return matched;\n    }\n\n    getBlockableElement(): HTMLElementÂ {\n      return this.el.nativeElement.children[0];\n    }\n\n    ngOnDestroy() {\n        if (this.dragStartSubscription) {\n            this.dragStartSubscription.unsubscribe();\n        }\n\n        if (this.dragStopSubscription) {\n            this.dragStopSubscription.unsubscribe();\n        }\n    }\n}\n@NgModule({\n    imports: [CommonModule],\n    exports: [Tree,SharedModule],\n    declarations: [Tree,UITreeNode]\n})\nexport class TreeModule { }\n"]}