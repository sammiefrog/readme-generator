"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = parse;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _debug = _interopRequireDefault(require("debug"));

var _marked =
/*#__PURE__*/
_regenerator["default"].mark(matchNexter);

var debug = (0, _debug["default"])('getParameterNames');
var COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var SPACES = /\s/mg;
var NEW_LINES = /\r?\n|\r/mg;
var ASYNC = /^\s*async(\s*|\()(?!\s*\=)/;
var ES6_STATIC = /static.*$/mg;
var nonVarChars = ['=', '(', ')', ','];

function matchNexter(string) {
  var updateIndex, minIndex, indexes, index, nextIndex, subString, ret, _subString, _ret;

  return _regenerator["default"].wrap(function matchNexter$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          minIndex = function _ref2() {
            return Math.min.apply(Math, indexes.filter(function (i) {
              return i > -1;
            }));
          };

          updateIndex = function _ref(stringIndex) {
            debug("Updating index starting at: ".concat(stringIndex));
            return indexes.map(function (foundAt, i) {
              if (foundAt === stringIndex) {
                return string.indexOf(nonVarChars[i], foundAt + 1);
              }

              return foundAt;
            });
          };

          debug("Chopping ".concat(string));
          indexes = nonVarChars.map(function (c) {
            return string.indexOf(c);
          });
          index = 0;

        case 5:
          if (!(index !== Infinity)) {
            _context.next = 26;
            break;
          }

          nextIndex = minIndex();
          debug("String: ".concat(string, "\nIndexes: ").concat(indexes, "\nIndex: ").concat(index, "\nNextIndex: ").concat(nextIndex));

          if (!(nextIndex !== Infinity)) {
            _context.next = 16;
            break;
          }

          subString = string.slice(index, nextIndex);
          ret = {
            subString: subString,
            start: index,
            end: nextIndex
          };
          debug(ret);
          _context.next = 14;
          return ret;

        case 14:
          _context.next = 22;
          break;

        case 16:
          if (!string.length) {
            _context.next = 22;
            break;
          }

          _subString = string.slice(index);
          _ret = {
            subString: _subString,
            start: index,
            end: string.length
          };
          debug(_ret);
          _context.next = 22;
          return _ret;

        case 22:
          index = nextIndex;
          indexes = updateIndex(index);
          _context.next = 5;
          break;

        case 26:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function parse(string) {
  var gen = matchNexter(string.toString().replace(ES6_STATIC, '').replace(NEW_LINES, '').replace(COMMENTS, '').replace(ASYNC, '').replace(SPACES, ''));
  var next = gen.next();
  var value = next.value;
  var argsEnded = false;
  var firstVar = true;
  var depth = {
    defaultParams: 0,
    parenthesis: 0
  };
  var vars = [];

  if (value && value.subString && value.subString.length) {
    debug("Pushing ".concat(value.subString, " to vars to start"));
    vars.push(value.subString);
  }

  debug("Starting var: ".concat(vars));
  next = gen.next();
  value = next.value;

  while (value !== undefined && !argsEnded) {
    debug("Continuing with ".concat(value.subString));
    var firstChar = value.subString[0];
    debug("firstChar: ".concat(firstChar));
    debug("firstVar: ".concat(firstVar));
    debug("argsEnded: ".concat(argsEnded));
    debug("depth: ".concat(JSON.stringify(depth)));
    debug("Current vars: ".concat(vars));

    if (firstChar === '=') {
      if (value.subString[1] === '>' && depth.defaultParams === 0) {
        debug('Found =>');
        argsEnded = true;
      } else {
        debug('Found =');
        depth.defaultParams++;
      }
    } else if (firstChar === '(' && !firstVar && vars.length) {
      firstVar = true;
      debug('Found (');
      depth.parenthesis++;
    } else if (firstChar === '(' && firstVar) {
      debug("Removing function name from vars");
      vars.pop();
      var newVar = value.subString.slice(1);

      if (newVar.length) {
        debug("Pushing to vars: ".concat(newVar));
        vars.push(newVar);
      }

      firstVar = false;
    } else if (firstChar === ')' && depth.parenthesis > 0) {
      debug('Found )');
      depth.parenthesis--;
    } else if (firstChar === ')' && depth.parenthesis === 0) {
      debug('Found ) and we are done');
      argsEnded = true;
    } else if (firstChar === ',' || firstChar === '(' && vars.length === 0) {
      var _newVar = value.subString.slice(1);

      debug("Found '".concat(_newVar, "'"));

      if (depth.parenthesis === 0) {
        depth.defaultParams = 0;
        debug("Pushing to vars: ".concat(_newVar));
        vars.push(_newVar);
      }
    }

    next = gen.next();
    value = next.value;
  }

  return vars;
}